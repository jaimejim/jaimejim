---
title: "Semantic Interoperability Workshop II"
layout: post
date: 2016-03-26 12:00
tag:
- iotsi
- semantic interoperability
blog: true
star: true
---

# Work in progress!!

## Summary:

As we mentioned on the [previous article](/making-things-interoperate/), IoT Standards for constrained devices are rapidly consolidating.


![IOTSI Folks](https://www.ietf.org/blog/wp-content/uploads/2016/03/group_pic_smaller.jpg)*Everyone in there, I am the guy in between the one in red and the one in blue*


##Â Interaction model

Among the topics and presentations I found particularly interesting that of 
[mkovatsc](https://github.com/mkovatsc). He explained the Runtime Discovery Process for a IoT Client node.

You get one entry point (in CoAP it is the RD) and the client tries to perform discovery in order to find and follow links in order to discover capabilities. You submit forms to interact with them. This way you can create processes that span over multiple devices involved in the process. If later one you find that you need something else, you can add new functionality at runtime, next client that comes along will have the same logic but see different capabilities of functionality and therefore use it. 

Parts of the information have to be shared a priori. The process is incremental, but once discovered, you don't need to perform the same operation every time, you can go to the bookmark. 

The following are examples of all those in HTML. 

~~~~~~~~~~~ html
// Links (Anchors) with human-readable information
<a href="about.html">More information</a>
<link rel="stylesheet" href="style.css">

// Templated Links to perform a query with a parameter.
<form method="get" action="search.php">
  <input id="query" type="text">
</form>

// Embedded Links which are used to embed other resources.
<img src="logo.png">
<audio src="audio.ogg">
<video src="video.mp4">

// Forms with the concrete method to be used and the 
<form method="post" action="">
  <input id="name" type="text">
  <input id="age" type="text">
  <input id="homepage" type="text">
</form>
~~~~~~~~~~~

The challenge is to define the human-readable parts as machine-readable. For that a vocabulary is necessary to give meaning to the tags. Such information needs to be share beforehand. 

In some models everything has to be shared from the beginning, therefore any change would involve changing the whole "framework". By forcing to share only the bare minimum, you avoid such problem.

Some organizations have created predefined interfaces, all of them are predefined and described, they even provide code generation. The device logic has to support such interfaces, no changes are possible at runtime. 
